[ec2-user@ip-172-31-43-248 AIND-Isolation]$ cat result.txt


########## NEW TOURNAMENT BEGINS ##########
This script evaluates the performance of the custom heuristic function by
comparing the strength of an agent using iterative deepening (ID) search with
alpha-beta pruning against the strength rating of agents using other heuristic
functions.  The `ID_Improved` agent provides a baseline by measuring the
performance of a basic agent using Iterative Deepening and the "improved"
heuristic (from lecture) on your hardware.  The `Student` agent then measures
the performance of Iterative Deepening and the custom heuristic against the
same opponents.
###########################################

def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(game.get_opponent(player)))
    move_count = game.move_count
    remaining_moves = game.width*game.height - game.move_count
    normalized_remaining_moves = remaining_moves/(game.width*game.height)
    location = game.get_player_location(player)
    center = (game.width//2, game.height//2)

    lecture_score_improved = lecture_heuristic_improved(own_moves, opp_moves, normalized_remaining_moves)
    survival_score = survival_heuristic(own_moves, normalized_remaining_moves)
    positional_score = positional_heuristic(location, center, normalized_remaining_moves)
    endgame_score = endgame_heuristic(game, player, move_count, normalized_remaining_moves)

    return lecture_score_improved + survival_score + 2*endgame_score


*************************
 Evaluating: ID_Improved
*************************

Playing Matches:
----------
  Match 1: ID_Improved vs   Random    	Result: 382 to 18
  Match 2: ID_Improved vs   MM_Null   	Result: 383 to 17
  Match 3: ID_Improved vs   MM_Open   	Result: 295 to 105
  Match 4: ID_Improved vs MM_Improved 	Result: 295 to 105
  Match 5: ID_Improved vs   AB_Null   	Result: 381 to 19
  Match 6: ID_Improved vs   AB_Open   	Result: 290 to 110
  Match 7: ID_Improved vs AB_Improved 	Result: 286 to 114


Results:
----------
ID_Improved         82.57%

*************************
   Evaluating: Student
*************************

Playing Matches:
----------
  Match 1:   Student   vs   Random    	Result: 378 to 22
  Match 2:   Student   vs   MM_Null   	Result: 387 to 13
  Match 3:   Student   vs   MM_Open   	Result: 322 to 78
  Match 4:   Student   vs MM_Improved 	Result: 323 to 77
  Match 5:   Student   vs   AB_Null   	Result: 391 to 9
  Match 6:   Student   vs   AB_Open   	Result: 327 to 73
  Match 7:   Student   vs AB_Improved



########## NEW TOURNAMENT BEGINS ##########
This script evaluates the performance of the custom heuristic function by
comparing the strength of an agent using iterative deepening (ID) search with
alpha-beta pruning against the strength rating of agents using other heuristic
functions.  The `ID_Improved` agent provides a baseline by measuring the
performance of a basic agent using Iterative Deepening and the "improved"
heuristic (from lecture) on your hardware.  The `Student` agent then measures
the performance of Iterative Deepening and the custom heuristic against the
same opponents.
###########################################

def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(game.get_opponent(player)))
    move_count = game.move_count
    remaining_moves = game.width*game.height - game.move_count
    normalized_remaining_moves = remaining_moves/(game.width*game.height)
    location = game.get_player_location(player)
    center = (game.width//2, game.height//2)

    lecture_score_improved = lecture_heuristic_improved(own_moves, opp_moves, normalized_remaining_moves)
    survival_score = survival_heuristic(own_moves, normalized_remaining_moves)
    positional_score = positional_heuristic(location, center, normalized_remaining_moves)
    endgame_score = endgame_heuristic(game, player, move_count, normalized_remaining_moves)

    return lecture_score_improved + 2*survival_score + 3*endgame_score


*************************
 Evaluating: ID_Improved
*************************

Playing Matches:
----------
  Match 1: ID_Improved vs   Random    	Result: 372 to 28
  Match 2: ID_Improved vs   MM_Null   	Result: 381 to 19
  Match 3: ID_Improved vs   MM_Open   	Result: 305 to 95
  Match 4: ID_Improved vs MM_Improved 	Result: 307 to 93
  Match 5: ID_Improved vs   AB_Null   	Result: 376 to 24
  Match 6: ID_Improved vs   AB_Open   	Result: 302 to 98
  Match 7: ID_Improved vs AB_Improved 	Result: 298 to 102


Results:
----------
ID_Improved         83.61%

*************************
   Evaluating: Student
*************************

Playing Matches:
----------
  Match 1:   Student   vs   Random    	Result: 381 to 19
  Match 2:   Student   vs   MM_Null   	Result: 398 to 2
  Match 3:   Student   vs   MM_Open   	Result: 321 to 79
  Match 4:   Student   vs MM_Improved 	Result: 327 to 73
  Match 5:   Student   vs   AB_Null   	Result: 387 to 13
  Match 6:   Student   vs   AB_Open   	Result: 320 to 80
  Match 7:   Student   vs AB_Improved 	Result: 333 to 67


Results:
----------
Student             88.11%


########## NEW TOURNAMENT BEGINS ##########
This script evaluates the performance of the custom heuristic function by
comparing the strength of an agent using iterative deepening (ID) search with
alpha-beta pruning against the strength rating of agents using other heuristic
functions.  The `ID_Improved` agent provides a baseline by measuring the
performance of a basic agent using Iterative Deepening and the "improved"
heuristic (from lecture) on your hardware.  The `Student` agent then measures
the performance of Iterative Deepening and the custom heuristic against the
same opponents.
###########################################

def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(game.get_opponent(player)))
    move_count = game.move_count
    remaining_moves = game.width*game.height - game.move_count
    normalized_remaining_moves = remaining_moves/(game.width*game.height)
    location = game.get_player_location(player)
    center = (game.width//2, game.height//2)

    lecture_score_improved = lecture_heuristic_improved(own_moves, opp_moves, normalized_remaining_moves)
    survival_score = survival_heuristic(own_moves, normalized_remaining_moves)
    positional_score = positional_heuristic(location, center, normalized_remaining_moves)
    endgame_score = endgame_heuristic(game, player, move_count, normalized_remaining_moves)

    return survival_score


*************************
 Evaluating: ID_Improved
*************************

Playing Matches:
----------
  Match 1: ID_Improved vs   Random    	Result: 39 to 1
  Match 2: ID_Improved vs   MM_Null   	Result: 38 to 2
  Match 3: ID_Improved vs   MM_Open   	Result: 30 to 10
  Match 4: ID_Improved vs MM_Improved 	Result: 28 to 12
  Match 5: ID_Improved vs   AB_Null   	Result: 40 to 0
  Match 6: ID_Improved vs   AB_Open   	Result: 28 to 12
  Match 7: ID_Improved vs AB_Improved 	Result: 27 to 13


Results:
----------
ID_Improved         82.14%

*************************
   Evaluating: Student
*************************

Playing Matches:
----------
  Match 1:   Student   vs   Random    	Result: 38 to 2
  Match 2:   Student   vs   MM_Null   	Result: 40 to 0
  Match 3:   Student   vs   MM_Open   	Result: 33 to 7
  Match 4:   Student   vs MM_Improved 	Result: 27 to 13
  Match 5:   Student   vs   AB_Null   	Result: 40 to 0
  Match 6:   Student   vs   AB_Open   	Result: 30 to 10
  Match 7:   Student   vs AB_Improved 	Result: 32 to 8


Results:
----------
Student             85.71%
[ec2-user@ip-172-31-43-248 AIND-Isolation]$